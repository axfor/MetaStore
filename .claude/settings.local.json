{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(CGO_LDFLAGS=\"-Wl,-U,_SecTrustCopyCertificateChain\" go build:*)",
      "Bash(tree:*)",
      "Bash(grep -E \"(Starting|became leader|elected leader)\" echo \"\" echo \"=== ËäÇÁÇπ2 ===\" tail -5 /tmp/node2.log)",
      "Bash(grep -E \"(Starting|became leader|became follower|elected leader)\" echo \"\" echo \"=== ËäÇÁÇπ3 ===\" tail -5 /tmp/node3.log)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(go version:*)",
      "Bash(go mod tidy:*)",
      "Bash(go mod download:*)",
      "Bash(cat:*)",
      "Bash(make help:*)",
      "Bash(make clean:*)",
      "Bash(make build:*)",
      "Bash(make cluster-memory:*)",
      "Bash(make status:*)",
      "Bash(make stop-cluster:*)",
      "Bash(CGO_ENABLED=1 CGO_LDFLAGS=\"-lrocksdb -lpthread -lstdc++ -ldl -lm -lzstd -llz4 -lz -lsnappy -lbz2\" go build:*)",
      "Bash(./metaStore --help)",
      "Bash(go test:*)",
      "Bash(CGO_ENABLED=1 CGO_LDFLAGS=\"-lrocksdb -lpthread -lstdc++ -ldl -lm -lzstd -llz4 -lz -lsnappy -lbz2\" go test:*)",
      "Bash(make test:*)",
      "Bash(git add:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nrefactor: migrate to golang-standards/project-layout structure\n\nThis is a major refactoring that reorganizes the codebase from a flat\nstructure in the root directory to a standard Go project layout following\ngolang-standards/project-layout conventions.\n\nKey changes:\n- Move application entry point to cmd/metastore/main.go\n- Reorganize core code into internal/ packages by functional layer:\n  - internal/store: Storage interface and implementations (memory/rocksdb)\n  - internal/raft: Raft consensus layer (node implementations)\n  - internal/http: HTTP API layer\n  - internal/storage: Low-level storage engine (RocksDB wrapper)\n  - internal/kvstore: KV store interface definitions\n  - internal/memory: Memory-based KV store implementation\n  - internal/rocksdb: RocksDB-based implementations\n- Remove flat structure files from root directory\n- Update Makefile to use new cmd/metastore path\n- Add PROJECT_LAYOUT.md documenting the new structure\n- Add comprehensive testing documentation in docs/TESTING.md\n- Migrate all tests to corresponding internal packages\n\nBenefits:\n- Better code organization with clear functional separation\n- Follows Go community best practices\n- Better encapsulation using internal packages\n- Improved modularity with interface-based interactions\n- Easier to test with clear package boundaries\n- Enhanced project professionalism and maintainability\n\nAll functionality and APIs remain unchanged - this is purely a structural\nrefactoring with no behavioral changes.\n\nü§ñ Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit:*)",
      "Bash(git restore:*)",
      "Bash(export CGO_ENABLED=1:*)",
      "Bash(export CGO_LDFLAGS=\"-lrocksdb -lpthread -lstdc++ -ldl -lm -lzstd -llz4 -lz -lsnappy -lbz2\":*)",
      "Bash(timeout 60 go test:*)",
      "Bash(timeout 120 go test:*)",
      "Bash(timeout 30 go test:*)",
      "Bash(git rm:*)",
      "Bash(go get:*)",
      "Bash(go build:*)",
      "Bash(CGO_ENABLED=0 go build:*)",
      "Bash(pkill:*)",
      "Bash(CGO_ENABLED=0 go test:*)",
      "Bash(CGO_ENABLED=1 CGO_LDFLAGS=\"-lrocksdb -lpthread -lstdc++ -ldl -lm -lzstd -llz4 -lz -lsnappy -lbz2 -Wl,-U,_SecTrustCopyCertificateChain\" go test:*)",
      "Bash(timeout 120 bash:*)",
      "Bash(/dev/null)",
      "Bash(go clean:*)",
      "Bash(CGO_ENABLED=1 CGO_LDFLAGS=\"-lrocksdb -lpthread -lstdc++ -ldl -lm -lzstd -llz4 -lz -lsnappy -lbz2 -Wl,-U,_SecTrustCopyCertificateChain\" go test ./test -run \"TestEtcdRocksDBSingleNodeOperations/PutAndGet\" -v -timeout=30s)",
      "Bash(CGO_ENABLED=1 CGO_LDFLAGS=\"-lrocksdb -lpthread -lstdc++ -ldl -lm -lzstd -llz4 -lz -lsnappy -lbz2 -Wl,-U,_SecTrustCopyCertificateChain\" go run:*)",
      "Bash(go doc:*)",
      "Bash(CGO_ENABLED=1 CGO_LDFLAGS=\"-lrocksdb -lpthread -lstdc++ -ldl -lm -lzstd -llz4 -lz -lsnappy -lbz2 -Wl,-U,_SecTrustCopyCertificateChain\" go build:*)",
      "Bash(tee:*)",
      "Read(//Users/bast/go/pkg/mod/go.etcd.io/etcd/client/v3@v3.6.4/**)",
      "Read(//Users/bast/go/pkg/mod/go.etcd.io/etcd/**)",
      "Read(//private/tmp/**)",
      "Bash(make test-unit:*)",
      "Bash(for file in /Users/bast/code/MetaStore/PROJECT_LAYOUT.md )",
      "Bash(/Users/bast/code/MetaStore/docs/PROJECT_SUMMARY.md )",
      "Bash(/Users/bast/code/MetaStore/docs/ROCKSDB_3NODE_TEST_REPORT.md )",
      "Bash(/Users/bast/code/MetaStore/docs/phase2-design.md )",
      "Bash(/Users/bast/code/MetaStore/docs/DIRECTORY_STRUCTURE_CHANGE_REPORT.md )",
      "Bash(/Users/bast/code/MetaStore/docs/ROCKSDB_BUILD_MACOS.md )",
      "Bash(/Users/bast/code/MetaStore/docs/ROCKSDB_TEST_GUIDE.md )",
      "Bash(/Users/bast/code/MetaStore/docs/PHASE2_COMPLETION_REPORT.md )",
      "Bash(/Users/bast/code/MetaStore/docs/ROCKSDB_BUILD_MACOS_EN.md )",
      "Bash(/Users/bast/code/MetaStore/docs/ROCKSDB_TEST_REPORT.md )",
      "Bash(/Users/bast/code/MetaStore/docs/TEST_COVERAGE_REPORT.md )",
      "Bash(/Users/bast/code/MetaStore/test_phase2.sh )",
      "Bash(/Users/bast/code/MetaStore/test_phase2_cluster.sh:*)",
      "Bash(do:*)",
      "Bash(done)",
      "Bash(./metastore:*)",
      "Bash(git checkout:*)",
      "Bash(for:*)",
      "Bash(/Users/bast/code/MetaStore/test/etcd_memory_integration_test.go )",
      "Bash(/Users/bast/code/MetaStore/test/cross_protocol_integration_test.go )",
      "Bash(/Users/bast/code/MetaStore/test/http_api_memory_integration_test.go )",
      "Bash(/Users/bast/code/MetaStore/test/http_api_memory_consistency_test.go )",
      "Bash(/Users/bast/code/MetaStore/internal/memory/kvstore_etcd_raft.go)",
      "Bash(/Users/bast/code/MetaStore/test/etcd_compatibility_test.go )",
      "Bash(/Users/bast/code/MetaStore/test/etcd_rocksdb_integration_test.go )",
      "Bash(/Users/bast/code/MetaStore/test/http_api_rocksdb_consistency_test.go )",
      "Bash(/Users/bast/code/MetaStore/internal/rocksdb/kvstore_etcd_raft.go)",
      "Bash(git mv:*)",
      "Bash(awk:*)",
      "Bash(/Users/bast/code/MetaStore/pkg/etcdapi/server.go )",
      "Bash(/Users/bast/code/MetaStore/pkg/etcdapi/kv.go )",
      "Bash(/Users/bast/code/MetaStore/pkg/etcdapi/lease_manager.go )",
      "Bash(/Users/bast/code/MetaStore/pkg/etcdapi/maintenance.go )",
      "Bash(/Users/bast/code/MetaStore/pkg/etcdapi/watch_manager.go )",
      "Bash(/Users/bast/code/MetaStore/pkg/etcdapi/lease.go )",
      "Bash(/Users/bast/code/MetaStore/pkg/etcdapi/watch.go )",
      "Bash(/Users/bast/code/MetaStore/pkg/etcdapi/errors.go)",
      "Bash(GOPROXY=https://proxy.golang.org,direct go mod tidy:*)",
      "Bash(pkg/etcdapi/kv.go)",
      "Bash([ -f \"$file\" ])",
      "Bash(\"$file\")",
      "Bash(pkg/etcdapi/lease_manager.go)",
      "Bash(sed:*)",
      "Bash(internal/rocksdb/kvstore.go)",
      "Bash(internal/memory/store.go)",
      "Bash(internal/memory/watch.go)",
      "Bash(chmod:*)",
      "Bash(xargs kill:*)",
      "Bash(lsof:*)",
      "Bash(make test-maintenance:*)",
      "Bash(timeout 600 make test:*)",
      "Bash(while ps aux)",
      "Bash(sample:*)",
      "Bash(if ! ps aux)",
      "Bash(then echo \"ÊµãËØïÂ∑≤ÂÆåÊàê!\")",
      "Bash(exit 0)",
      "Bash(fi)",
      "Bash(kill:*)",
      "Bash(echo:*)",
      "Bash(ps:*)",
      "Bash(while ps:*)",
      "Bash(while true)",
      "Bash(if ps -p 58114)",
      "Bash(then)",
      "Bash(else)",
      "Bash(break)",
      "Bash(xargs:*)",
      "Bash(while read f)",
      "Bash(sort:*)"
    ],
    "deny": [],
    "ask": []
  }
}
